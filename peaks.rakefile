#!/usr/bin/env ruby
require 'rubygems'
require 'fileutils'
require 'pp'

task :default => ['peaks:make_output_directories','peaks:copy_config','peaks:call']

namespace :peaks do
  config = YAML::load(File.open('/nfs/th_group/mp4/bcl11/config.yml')).merge ENV
  @config = config 

  @peaks_dir = "peaks"
  @motifs_dir = "motifs"
  @checkpoints_dir = "checkpoints"
  @bg_dir = "bg"
  @log_dir = "log"
  @logcopy_dir = "/nfs/th_group/mp4/bcl11/log"

  def method
    @config["peak_calling_method"]
  end

  def ref_file
    "ref/#{@config['ref']}.fasta"
  end
  
  def ref_basename
    File.basename ref_file,".fasta"
  end
   
  def ref_seq_count
    `wc -l ref/#{ref_basename}.len | cut -f 1 -d ' '`.to_i
  end

  def inputf
    inf = @config["input"]
    
    if inf == nil
      raise "No input file specified"
    end
    unless File.exist? inf
      raise "Input file %s doesn't exist" % [inf]
    end

    inf
  end
  
  def inputf_basename
    File.basename inputf, ".bed"
  end
 
  def controlf
    cf = @config["control"]

    if cf == nil
      raise "No control file specified"
    end

    unless File.exist? cf
      raise "Control file %s doesn't exist" % [cf]
    end

    cf
  end

  def controlf_basename
    File.basename(File.basename(controlf, ".bed"),".sam")
  end

  def macs_outputf
    mfold = @config["peak_calling"]["macs"]["mfold"]
    nomodel = @config["peak_calling"]["macs"]["nomodel"]
    bandwidth = @config["peak_calling"]["macs"]["bandwidth"]
    shiftsize = @config["peak_calling"]["macs"]["shiftsize"]
    
    "#{@peaks_dir}/#{inputf_basename}_control-#{controlf_basename}_#{mfold}mfold-#{nomodel ? 'nomodel' : 'model'}-#{bandwidth}bw-#{shiftsize}shift.macs"
  end
  
  def swembl_outputf
    sconfig = @config['peak_calling']['swembl']
    penalty_factor = sconfig['penalty_factor']
    relbg = sconfig['relative_background']
    fraglen = sconfig['fragment_length']
    
    "#{@peaks_dir}/#{inputf_basename}_control-#{controlf_basename}_#{penalty_factor}penalty-#{fraglen}fraglen-#{relbg}relbg.swembl"
  end

  def peaks_outputf 
    if method == "macs"
      macs_outputf    
    else
      swembl_outputf
    end
  end

  def peaks_gff_file
    "#{@peaks_dir}/#{inputf_basename}-#{method}.gff"
  end

  def peaks_html_file
    "#{@peaks_dir}/#{inputf_basename}-#{method}.html" 
  end

  def peaks_close_to_genes_gff_file
    "#{@peaks_dir}/#{inputf_basename}-#{method}-genes-closeby.gff"  
  end
  
  def peaks_close_to_genes_html_file
    "#{@peaks_dir}/#{inputf_basename}-#{method}-genes-closeby.html"
  end

  def peaks_seq_file
    "#{@peaks_dir}/#{inputf_basename}-#{method}-#{around_peaks}around-#{max_count}top.fasta"
  end
    
  def peaks_seq_with_closeby_genes_gff_file
    "#{@peaks_dir}/#{inputf_basename}-#{method}-#{around_peaks}around-#{max_count}top-closeby-genes.gff"
  end

  def peaks_seq_with_closeby_genes_fasta_file
    "#{@peaks_dir}/#{inputf_basename}-#{method}-#{around_peaks}around-#{max_count}top-closeby-genes.fasta"
  end

  def macsbed_outputf 
    "#{@peaks_dir}/#{inputf_basename}-macs.bed"
  end
  
  def macsneg_outputf
    "#{@peaks_dir}/#{inputf_basename}-negative.macs"
  end
  
  def around_peaks
    @config['peak_seq_retrieval']['around_peaks']
  end
  
  def max_count
    @config['peak_seq_retrieval']['max_count']
  end
  
  r = rand(100000)
  peakseq_cmd_was_run = true
  trainbg_cmd_was_run = true
  nmica_cmd_was_run = true
  test = config["test"]

  task :clean do
    rm_rf @peaks_dir if FileTest.exist? @peaks_dir
    rm_rf @motifs_dir if FileTest.exist? @motifs_dir
    rm_rf @bg_dir if FileTest.exist? @bg_dir
  end

  task :copy_config do
    cp "/nfs/th_group/mp4/bcl11/config.yml", "/nfs/th_group/mp4/bcl11/log/config_#{r}.yml"
  end

  task :make_output_directories do 
    mkdir @peaks_dir unless FileTest.exist? @peaks_dir
    mkdir @motifs_dir unless FileTest.exist? @motifs_dir
    mkdir @checkpoints_dir unless FileTest.exist? @checkpoints_dir
    mkdir @bg_dir unless FileTest.exist? @bg_dir
    mkdir @logcopy_dir unless FileTest.exist? @logcopy_dir
  end
  
  desc("Call peaks (with the method configured with variable 'peak_caller')")
  task :call, :method, :needs => [:make_output_directories] do |t,args|
    if method == "macs"
      Rake::Task['peaks:macs'].invoke
    elsif method == "swembl"
      Rake::Task['peaks:swembl'].invoke
    end
  end

  desc("Call peaks with macs")
  task :macs => [:make_output_directories] do
    mconfig = config['peak_calling']['macs']
    gsize = mconfig['effective_genome_size']
    tsize = mconfig['tag_size']
    pvalue = mconfig['pvalue']
    mfold = mconfig['mfold']
    bw = mconfig['bandwidth']
    nomodel = mconfig['nomodel']
    shiftsize = mconfig["shiftsize"]

    if nomodel
      nomodelstr = "--nomodel"
    else
      nomodelstr = "--mfold=#{mfold}"
    end

    if nomodel
      shiftsizestr = "--shiftsize #{shiftsize}"
    else
      shiftsizestr = ""
    end

    if mconfig["diagnosis"]
      diag = "--diag"
    else
      diag = ""
    end
    
    unless uptodate? macs_outputf,inputf
      macs_cmd = "bsub -I \"macs --format SAM --gsize #{gsize} --bw #{bw} --tsize #{tsize} --pvalue #{pvalue} --treatment #{inputf} #{nomodelstr} #{shiftsizestr} --control #{controlf} #{diag} --name #{inputf_basename}_#{r}\" > #{@log_dir}/#{inputf_basename}_#{r}.log 2> #{@log_dir}/#{inputf_basename}_#{r}.err"
      $stderr.puts macs_cmd
      system(macs_cmd) unless test

      mv "#{inputf_basename}_#{r}_negative_peaks.xls",macsneg_outputf
      mv "#{inputf_basename}_#{r}_peaks.xls",macs_outputf
      mv "#{inputf_basename}_#{r}_peaks.bed",macsbed_outputf
      #rm "#{inputf_basename}_#{r}_model.r"
    else
      $stderr.puts "Peaks called with macs already exist"
    end
  end

  desc("Call peaks with SWEMBL. Takes the SAM files as input")
  task :swembl => [:make_output_directories] do
    sconfig = config['peak_calling']['swembl']
    penalty_factor = sconfig['penalty_factor']
    relbg = sconfig['relative_background']
    fraglen = sconfig['fragment_length']
    swembl_basename = "#{File.basename(swembl_outputf,'.swembl')}"
    
    unless uptodate? swembl_outputf, inputf
      swembl_cmd = "bsub -K -J'#{swembl_basename}' -olog/#{swembl_basename}.bsub \"SWEMBL -S -i #{inputf} -r #{controlf} -f #{fraglen} -R #{relbg} -x #{penalty_factor} -o '#{swembl_outputf}'\""
      sh swembl_cmd
    else
      $stderr.puts "Peaks called with swembl already exist (%s)" % [swembl_outputf]
    end
  end

  def peakseq_cmdline(inputf_basename, method, config, r, log_dir, peaks_dir)
    rconfig = config['peak_seq_retrieval']
    around_peaks = rconfig["around_peaks"]
    max_count = rconfig["max_count"]
    maskrepeats = rconfig['mask_repeats'] ? "-repeatMask" : "-noRepeatMask"
    masktranslations = rconfig['mask_translations'] ? "-excludeTranslations" : "-noExcludeTranslations"
    aroundpeaks = (rconfig['around_peaks'] > 0) ? "-aroundPeaks #{rconfig['around_peaks']}" : ""
    ignore_xrefless = rconfig["ignore_xrefless"]

    peakseq_cmd = "echo 'Converting peak sequences from input peak format to GFF';bsub -I \"ngpeak2gff -format #{method} -peaks #{peaks_outputf} > #{peaks_gff_file};\
cat #{peaks_gff_file} | gffaddensemblurl Mus_musculus > #{peaks_html_file};\"\
echo 'Retrieving peak sequences as FASTA';bsub -I \"nmensemblpeakseq -database #{config['ref']} \
-host #{config['ensembl_host']} -port #{config['ensembl_port']} \
-user #{config['ensembl_user']} \
-peaks #{peaks_outputf} \
-inputFormat #{method} #{maskrepeats} #{masktranslations} \
-aroundPeak #{rconfig['around_peaks']} \
-maxLength #{rconfig['max_length']} \
-maxCount #{rconfig['max_count']} \
-minNonN #{rconfig['min_non_n']} \
-minLength #{rconfig['min_length']} \
-maxDistanceFromGene #{rconfig['max_distance_from_gene']} \
> #{peaks_seq_file} 2> #{@log_dir}/nmensemblpeakseq_#{inputf_basename}_#{around_peaks}around-#{max_count}top_#{r}.err;\";\
echo 'Retrieving peak sequences as GFF for those peaks with closeby genes';bsub -i \"nmensemblpeakseq -database #{config['ref']} \
-host #{config['ensembl_host']} -port #{config['ensembl_port']} \
-user #{config['ensembl_user']} \
-peaks #{peaks_outputf} \
-inputformat #{method} #{maskrepeats} #{masktranslations} \
-aroundpeak #{rconfig['around_peaks']} \
-maxlength #{rconfig['max_length']} \
-maxcount #{rconfig['max_count']} \
-minnonn #{rconfig['min_non_n']} \
-minlength #{rconfig['min_length']} \
-maxdistancefromgene #{rconfig['max_distance_from_gene']} \
-ignorexrefless \
-excludeunlabelled \
-outputformat gff \
> #{peaks_seq_with_closeby_genes_gff_file} 2> #{@log_dir}/nmensemblpeakseq_#{inputf_basename}_#{around_peaks}around-closeby-genes-#{max_count}top_#{r}.err;\";\
 echo 'Retrieving peak sequences as FASTA for those peaks with closeby genes';bsub -I \"nmensemblfeat -database #{config['ref']} \
-host #{config['ensembl_host']} -port #{config['ensembl_port']} \
-user #{config['ensembl_user']} \
-features #{peaks_outputf} \
> #{peaks_seq_with_closeby_genes_fasta_file} 2> #{@log_dir}/nmensemblpeakseq_#{inputf_basename}_#{around_peaks}around-closeby-genes-#{max_count}top_#{r}-fasta.err;\""
    return peakseq_cmd 
  end

  desc("Retrieve peak sequences (local disk or Ensembl)")
  task :retrieve_sequences => [:call] do |t,args|
    method = config['peak_calling_method']
    
    ENV['NMICA_JVMOPTS'] = "-Xmx5000m"
    
    unless uptodate? peaks_seq_file, peaks_outputf 
      peakseq_cmd_was_run = true
      
      peakseq_input_cmd = peakseq_cmdline(inputf_basename,method,config,r,@log_dir,@peaks_dir)
      sh peakseq_input_cmd
    else
      peakseq_cmd_was_run = false
      $stderr.puts "Peak sequences for %s peak calls exist already (%s)" % [method,peaks_seq_file] 
    end
  end

  desc("Clean retrieved sequences")
  task :clean_retrieved_sequences do 
    if File.exist? peaks_seq_file
      $stderr.puts "Removing #{peaks_seq_file}"
      rm peaks_seq_file
    else
      $stderr.puts "#{peaks_seq_file} does not exist."
    end
  end

  desc("Train background model from peak sequences for NMICA")
  task :train_bg => [:retrieve_sequences] do |t,args|
    jobdep = ""
    if peakseq_cmd_was_run
      jobdep = "-w'done(peakseq_#{r})'"
    else
      jobdep = ""
    end
    nconfig = config["motif_discovery"]["nmica"]
    method = config["peak_calling_method"]
    bgfile = "#{@bg_dir}/#{inputf_basename}-#{method}-#{around_peaks}around-#{max_count}top.bg"
    seqfile = "#{@peaks_dir}/#{inputf_basename}-#{method}-#{around_peaks}around-#{max_count}top.fasta"
    puts bgfile
    puts seqfile
    unless uptodate? bgfile, seqfile
      trainbg_cmd_was_run = true
      trainbg_cmd = "bsub -J'nmmakebg_#{inputf_basename}_#{r}' #{jobdep} -o#{@log_dir}/#{bgfile}_#{r}.bout -K \"nmmakebg -classes #{nconfig['background_classes']} -order #{nconfig['background_order']} -seqs #{seqfile} -out #{bgfile} > #{@log_dir}/nmmakebg_#{inputf_basename}_#{around_peaks}around-#{max_count}top.log\""
      $stderr.puts trainbg_cmd
      system(trainbg_cmd)
    else
      trainbg_cmd_was_run = false
      $stderr.puts "Background model for #{method} peak sequences already exists" 
    end
  end

  desc("Discover motifs from peak sequences with NMICA")
  task :nmica => [:make_output_directories,:train_bg] do |t,args|
    nconfig = config["motif_discovery"]["nmica"]
    method = config["peak_calling_method"]
    nummotifs = nconfig["num_motifs"]
    aroundpeaks = config["peak_seq_retrieval"]["around_peaks"]
    num_matches = config["peak_seq_retrieval"]["max_count"]
    
    if trainbg_cmd_was_run
      jobdep = "-w'done(nmmakebg_#{inputf_basename}_#{r})'"
    else
      jobdep = ""
    end

    prefix = "#{inputf_basename}-#{aroundpeaks}around-#{max_count}top-#{nummotifs}motifs"
    $stderr.puts method
    ENV['NMICA_JVMOPTS'] = "-Xmx#{nconfig['mem']}m"
    resources = "select[type==X86_64 && ncpus>=#{nconfig['cpus']} && mem>=#{nconfig['mem']}] span[hosts=1] rusage[mem=#{nconfig['mem']}]"
    if nconfig['mem'] > 3000
      muchosmem = "-M'#{nconfig['mem']*1000}'" 
    else
      muchosmem = ""
    end

    unless uptodate? "#{@motifs_dir}/#{prefix}.xms","#{@peaks_dir}/#{inputf_basename}-#{method}.fasta"
      nmica_cmd_was_run = true
      nmica_cmd = "bsub -J'nminfer_#{inputf_basename}_#{r}' -qlong -o'#{@log_dir}/nminfer-#{inputf_basename}-#{method}-#{r}.bsub' \
-R'#{resources}' #{jobdep} #{muchosmem} \
\"nminfer -seqs #{@peaks_dir}/#{inputf_basename}-#{method}-#{around_peaks}around-#{max_count}top.fasta \
-numMotifs #{nummotifs} \
-backgroundModel #{@bg_dir}/#{inputf_basename}-#{method}-#{around_peaks}around-#{max_count}top.bg \
-minLength #{nconfig['min_motif_length']} -maxLength #{nconfig['max_motif_length']} \
-threads #{nconfig['cpus']} \
-minSeqLength 50 \
-maxCycles 1000000 \
-revComp \
-expectedUsageFraction #{nconfig['expected_usage_fraction']} \
-checkpoint #{@checkpoints_dir}/#{prefix} \
-sampleFile #{@motifs_dir}/#{prefix} \
-sampleInterval 10000 -checkpointInterval 10000 -logInterval 100 \
-out #{@motifs_dir}/#{prefix}.xms > #{@log_dir}/#{prefix}.log 2> #{@log_dir}/#{prefix}.err\""
      $stderr.puts nmica_cmd
      system(nmica_cmd)
    else
      nmica_cmd_was_run = false
      $stderr.puts "Motifs for #{method} peak sequences already exist"
    end
  end

  desc("clean up the intermediate NMICA files (checkpoints + samples)")
  task :clean_nmica => [:nmica] do
    if nmica_cmd_was_run
      jobdep = "-w'done(nminfer_#{inputf_basename}_#{r})'"
    else
      jobdep = ""
    end

    system("bsub -Jremove_checkpoints_#{r} -I \"rm #{@checkpoints_dir}/*.jos\"")
    system("bsub -Jremove_samples_#{r} -I \"rm #{@motifs_dir}/*sample*.xms\"")
  end
 
  def tss_file
      tssconfig = @config["tss_seq_retrieval"]
      upstr = tssconfig["upstream_nukes"]
      downstr = tssconfig["downstream_nukes"]

      "ref/#{@config['ref']}-tss-#{upstr}upstr-#{downstr}downstr.gff"
  end

  def regfeat_file
    "ref/#{@config['ref']}-regfeat.gff"
  end

  def tss_regfeat_combo_file
    return ("%s_%s.gff" % [File.basename(tss_file,".gff"),File.basename(regfeat_file,".gff")])
  end

  desc("Fetch sequences around TSSs from the genome")
  task :retrieve_seqs_around_tss do
    tssconfig = @config["tss_seq_retrieval"]
    upstr = tssconfig["upstream_nukes"]
    downstr = tssconfig["downstream_nukes"]

    unless File.exists? tss_file
      sh "bsub -Jretrieve_seqs_around_tss-#{r} -olog/retrieve_seqs_around_tss-#{r}.bsub -K \"nmensemblseq -format gff -fivePrimeUTR #{upstr} #{downstr} -known -proteinCoding -ignoreXrefless -noRepeatMask -noExcludeTranslations -database #{@config['ref']} > #{tss_file} 2> log/retrieve_seqs_around_tss-#{r}.err\""
    else
      $stderr.puts "TSS sequences have already been fetched (%s)." % [tss_file]
    end
  end

  desc("Retrieve regulatory features from the genome")
  task :retrieve_regfeats do
    regconfig = @config["regulatory_feature_retrieval"]

    unless File.exists? regfeat_file
      sh "nmensemblregfeat -database #{@config['ref']} -format gff -host #{@config['ensembl_host']} -port #{@config['ensembl_port']} -user #{@config['ensembl_user']} > #{regfeat_file}"
    else
      $stderr.puts "Regulatory features have already been fetched (%s)" % [regfeat_file]
    end
  end

  desc("Combine the TSS sequence regions with the regulatory regions")
  task :combine_tss_with_regfeats => [:retrieve_seqs_around_tss, :retrieve_regfeats] do
    unless (uptodate?(tss_regfeat_combo_file,regfeat_file) and uptodate?(tss_regfeat_combo_file,tss_file))
      sh "cat #{regfeat_file} #{tss_file} > #{tss_regfeat_combo_file}.tmp"
      sh "nmcoveredseq -format gff -features #{tss_regfeat_combo_file}.tmp > #{tss_regfeat_combo_file}"
      rm "#{tss_regfeat_combo_file}.tmp"
    else
    end
  end

  desc("Subselect peaks close to transcription start sites of known genes")
  task :peaks_close_to_genes => [:retrieve_seqs_around_tss,:retrieve_sequences] do
    unless (uptodate?(peaks_close_to_genes_gff_file,peaks_gff_file) and uptodate?(peaks_close_to_genes_gff_file,tss_file))
      sh "bsub -olog/nmoverlapseq-#{r}.bsub -Jnmoverlapseq-#{r} -K \"nmoverlapseq -features #{peaks_gff_file} -mask #{tss_file} > #{peaks_close_to_genes_gff_file};\
cat #{peaks_close_to_genes_gff_file} | gffaddensemblurl Mus_musculus > #{peaks_close_to_genes_html_file}\""
    else
      $stderr.puts "Peaks close to genes have already been calculated (%s)" % [peaks_close_to_genes_gff_file]
    end
  end

  desc("Create and fill the conservation score database for a DAS data source")
  task :fill_conservation_scores do
    cconfig = @config["conservation_score_track"]
    host = cconfig["host"]
    user = cconfig["user"]
    passwd = cconfig["password"]
    port = cconfig["port"]
    dbname = cconfig["database_name"]
    input_file_pattern = File.join(cconfig["input_data_prefix"],"*.gz")
    res_tiny="-R'select[type==X86_64 && mem>=2000] rusage[mem=2000]'"

    sh "ngmkdepthdb -database #{dbname} -user #{user} -password #{passwd} -host #{host} -refLengths ref/#{@config['ref']}.len -dropDatabase -createDatabase" 
    sh "bsub -qlong -o'log/conspileup-#{r}_%J-%I.bsub' #{res_tiny} -J'conspileup-#{r}-[1-#{ref_seq_count}]%8' \"ngconservation -database #{dbname} -user #{user} -password #{passwd} -host #{host} -refLengths ref/#{@config['ref']}.len -conservationScores #{input_file_pattern}\""
  end

  task :clean_peaks do
    if File.exist? peaks_outputf
      $stderr.puts "Removing %s" % [peaks_outputf]
      rm peaks_outputf
    else
      $stderr.puts "Peak outputfile doesn't exist at %s" % [peaks_outputf]
    end
  end
end
